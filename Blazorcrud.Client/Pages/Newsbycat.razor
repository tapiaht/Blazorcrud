@page "/newsbycad/{Page}"

@inject ICategoriaService UploadService
@inject IUserService UserService
@inject IAlertService AlertService
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@inject Blazorcrud.Client.Shared.PageHistoryState PageHistoryState
@inject NavigationManager navManager
<h1>Noticias por Categoria</h1>
<br />

@if (uploads == null)
{
    <p><em>Loading...</em></p>
}
else
{
    
                <div class="card col-md-3" style="width: 18rem;">
         @foreach (var upload in uploads.Results)
            {
    
    
                <div class="row">
                            <div class="col-md-12">
                                <a style="font-size:16px" href="newsbycat/@upload.Id">@($"{upload.Nombre}") </a>
                            </div>
                        </div>
                        <div class="d-flex flex-row align-items-center">
                <img src="@($"{upload.Foto}")" title="" alt=" " style="width:fit-content">

                        </div>
            }
        </div>
  
@*
    <Pager Result=@uploads PageChanged=PagerPageChanged />*@
}

@code {
    [Parameter]
    public string Page { get; set; } = "1";
    [Parameter]
    public string SearchTerm { get; set; } = string.Empty;

    protected PagedResult<Blazorcrud.Shared.Models.Categoria> uploads;

    public bool LoggedIn
    {
        get { return UserService.User != null; }
    }

    protected override async Task OnParametersSetAsync()
    {
        uploads = await UploadService.GetUploads(null, Page);
        PageHistoryState.AddPageToHistory(UriHelper.Uri);
    }

    protected async Task SearchBoxKeyPress(KeyboardEventArgs ev)
    {
        if (ev.Key == "Enter")
        {
            await SearchClick();
        }
    }

    protected async Task SearchClick()
    {
        if (string.IsNullOrEmpty(SearchTerm))
        {
            uploads = await UploadService.GetUploads(null, Page);
            return;
        }
        uploads = await UploadService.GetUploads(SearchTerm, Page);
        StateHasChanged();
    }

    protected async Task ClearSearch()
    {
        SearchTerm = string.Empty;
        uploads = await UploadService.GetUploads(SearchTerm, Page);
        PageHistoryState.AddPageToHistory(UriHelper.Uri);
        StateHasChanged();
    }
    protected void PagerPageChanged(int page)
    {
        UriHelper.NavigateTo("/upload/" + page);
        PageHistoryState.AddPageToHistory(UriHelper.Uri);
    }
}